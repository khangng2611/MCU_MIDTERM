
midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080025e4  080025e4  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e4  080025e4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080025ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000004c  08002638  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002638  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008afa  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a75  00000000  00000000  00028b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c0a  00000000  00000000  0002b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7a8  00000000  00000000  000424e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e6e  00000000  00000000  0004dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfaf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  000cfb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	080025ac 	.word	0x080025ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	080025ac 	.word	0x080025ac

0800014c <isButtonPressed>:
int KeyReg0[NO_OF_BUTTONS] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg1[NO_OF_BUTTONS] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg2[NO_OF_BUTTONS] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[NO_OF_BUTTONS] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000068 	.word	0x20000068

08000180 <isButtonLongPressed>:

int isButtonLongPressed(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (button_flag_longpressed[index] == 1) {
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <isButtonLongPressed+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d101      	bne.n	8000198 <isButtonLongPressed+0x18>
		return 1;
 8000194:	2301      	movs	r3, #1
 8000196:	e000      	b.n	800019a <isButtonLongPressed+0x1a>
	}
	return 0;
 8000198:	2300      	movs	r3, #0
}
 800019a:	4618      	mov	r0, r3
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000074 	.word	0x20000074

080001a8 <subKeyProcess>:
//		return 1;
//	}
//	return 0;
//}

void subKeyProcess(int index){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <subKeyProcess+0x1c>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2101      	movs	r1, #1
 80001b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//	}
//  	else {
//  		TimeOutForDoubleClick[index] = DURATION_FOR_DOUBLE_CLICK;
//   		button_flag_doublepressed[index] = 0;
//  	}
}
 80001ba:	bf00      	nop
 80001bc:	370c      	adds	r7, #12
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	20000068 	.word	0x20000068

080001c8 <getKeyInput>:
//nhieu nut nhan, dung mang, o ham HALGPIOReadPin dung them if de phan loai nut, sau do for cho full ham getKeyInput() (xem them tren Internet)
void getKeyInput(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e09b      	b.n	800030c <getKeyInput+0x144>
	  KeyReg2[i] = KeyReg1[i];
 80001d4:	4a52      	ldr	r2, [pc, #328]	; (8000320 <getKeyInput+0x158>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	4951      	ldr	r1, [pc, #324]	; (8000324 <getKeyInput+0x15c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg0[i];
 80001e4:	4a50      	ldr	r2, [pc, #320]	; (8000328 <getKeyInput+0x160>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	494c      	ldr	r1, [pc, #304]	; (8000320 <getKeyInput+0x158>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  switch (i) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	d020      	beq.n	800023c <getKeyInput+0x74>
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b02      	cmp	r3, #2
 80001fe:	dc29      	bgt.n	8000254 <getKeyInput+0x8c>
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d003      	beq.n	800020e <getKeyInput+0x46>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d00b      	beq.n	8000224 <getKeyInput+0x5c>
 800020c:	e022      	b.n	8000254 <getKeyInput+0x8c>
	  		case 0:
	  			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) ;
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	4846      	ldr	r0, [pc, #280]	; (800032c <getKeyInput+0x164>)
 8000212:	f001 f98b 	bl	800152c <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	4619      	mov	r1, r3
 800021a:	4a43      	ldr	r2, [pc, #268]	; (8000328 <getKeyInput+0x160>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			break;
 8000222:	e017      	b.n	8000254 <getKeyInput+0x8c>
	  		case 1:
	  			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) ;
 8000224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000228:	4840      	ldr	r0, [pc, #256]	; (800032c <getKeyInput+0x164>)
 800022a:	f001 f97f 	bl	800152c <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	4619      	mov	r1, r3
 8000232:	4a3d      	ldr	r2, [pc, #244]	; (8000328 <getKeyInput+0x160>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			break;
 800023a:	e00b      	b.n	8000254 <getKeyInput+0x8c>
	  		case 2:
	  			KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) ;
 800023c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000240:	483a      	ldr	r0, [pc, #232]	; (800032c <getKeyInput+0x164>)
 8000242:	f001 f973 	bl	800152c <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	4619      	mov	r1, r3
 800024a:	4a37      	ldr	r2, [pc, #220]	; (8000328 <getKeyInput+0x160>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			break;
 8000252:	bf00      	nop
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000254:	4a32      	ldr	r2, [pc, #200]	; (8000320 <getKeyInput+0x158>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4932      	ldr	r1, [pc, #200]	; (8000328 <getKeyInput+0x160>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000264:	429a      	cmp	r2, r3
 8000266:	d14e      	bne.n	8000306 <getKeyInput+0x13e>
 8000268:	4a2d      	ldr	r2, [pc, #180]	; (8000320 <getKeyInput+0x158>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	492c      	ldr	r1, [pc, #176]	; (8000324 <getKeyInput+0x15c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d144      	bne.n	8000306 <getKeyInput+0x13e>
	    if (KeyReg2[i] == NORMAL_STATE) {
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x15c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d104      	bne.n	8000292 <getKeyInput+0xca>
			//to reset lonngpressed flag
	    	button_flag_longpressed[i] = 0;
 8000288:	4a29      	ldr	r2, [pc, #164]	; (8000330 <getKeyInput+0x168>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2100      	movs	r1, #0
 800028e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    }

	    //count for double click
	    //TimeOutForDoubleClick[i] --;

	    if (KeyReg2[i] != KeyReg3[i]){
 8000292:	4a24      	ldr	r2, [pc, #144]	; (8000324 <getKeyInput+0x15c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	4926      	ldr	r1, [pc, #152]	; (8000334 <getKeyInput+0x16c>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d016      	beq.n	80002d4 <getKeyInput+0x10c>
	      KeyReg3[i] = KeyReg2[i];
 80002a6:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyInput+0x15c>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	4921      	ldr	r1, [pc, #132]	; (8000334 <getKeyInput+0x16c>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (KeyReg2[i] == PRESSED_STATE){
 80002b6:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <getKeyInput+0x15c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d121      	bne.n	8000306 <getKeyInput+0x13e>
	        subKeyProcess(i);
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f7ff ff70 	bl	80001a8 <subKeyProcess>
	        TimeOutForKeyPress[i] = DURATION_FOR_AUTO_INCREASING;
 80002c8:	4a1b      	ldr	r2, [pc, #108]	; (8000338 <getKeyInput+0x170>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2164      	movs	r1, #100	; 0x64
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d2:	e018      	b.n	8000306 <getKeyInput+0x13e>
	      }
	    }
	    else {
	        TimeOutForKeyPress[i] --;
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <getKeyInput+0x170>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	1e5a      	subs	r2, r3, #1
 80002de:	4916      	ldr	r1, [pc, #88]	; (8000338 <getKeyInput+0x170>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        if (TimeOutForKeyPress[i] == 0){
 80002e6:	4a14      	ldr	r2, [pc, #80]	; (8000338 <getKeyInput+0x170>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d109      	bne.n	8000306 <getKeyInput+0x13e>
	          KeyReg3[i] = NORMAL_STATE;
 80002f2:	4a10      	ldr	r2, [pc, #64]	; (8000334 <getKeyInput+0x16c>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2101      	movs	r1, #1
 80002f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	          button_flag_longpressed[i] = 1;
 80002fc:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <getKeyInput+0x168>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3301      	adds	r3, #1
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b02      	cmp	r3, #2
 8000310:	f77f af60 	ble.w	80001d4 <getKeyInput+0xc>
	        }
	    }
	  }
  }
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000018 	.word	0x20000018
 8000324:	20000024 	.word	0x20000024
 8000328:	2000000c 	.word	0x2000000c
 800032c:	40010800 	.word	0x40010800
 8000330:	20000074 	.word	0x20000074
 8000334:	20000030 	.word	0x20000030
 8000338:	20000000 	.word	0x20000000

0800033c <fsm_simple_buttons_run>:
//		status = DEC;
//		setTimer1(10000);
//	}
//}

void fsm_simple_buttons_run () {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch (status) {
 8000340:	4b97      	ldr	r3, [pc, #604]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	2b06      	cmp	r3, #6
 8000348:	f200 8226 	bhi.w	8000798 <fsm_simple_buttons_run+0x45c>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <fsm_simple_buttons_run+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000371 	.word	0x08000371
 8000358:	08000379 	.word	0x08000379
 800035c:	08000405 	.word	0x08000405
 8000360:	080004d3 	.word	0x080004d3
 8000364:	080005b1 	.word	0x080005b1
 8000368:	0800064d 	.word	0x0800064d
 800036c:	080006e7 	.word	0x080006e7
	case INIT:
		status = RESET_STATE;
 8000370:	4b8b      	ldr	r3, [pc, #556]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000372:	2202      	movs	r2, #2
 8000374:	601a      	str	r2, [r3, #0]
		break;
 8000376:	e21c      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
	case RESET_STATE:
		display7SEG(count);
 8000378:	4b8a      	ldr	r3, [pc, #552]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fa23 	bl	80007c8 <display7SEG>
		if (isButtonPressed(0) == 1) {
 8000382:	2000      	movs	r0, #0
 8000384:	f7ff fee2 	bl	800014c <isButtonPressed>
 8000388:	4603      	mov	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d102      	bne.n	8000394 <fsm_simple_buttons_run+0x58>
			status = RESET_STATE;
 800038e:	4b84      	ldr	r3, [pc, #528]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000390:	2202      	movs	r2, #2
 8000392:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 8000394:	2001      	movs	r0, #1
 8000396:	f7ff fed9 	bl	800014c <isButtonPressed>
 800039a:	4603      	mov	r3, r0
 800039c:	2b01      	cmp	r3, #1
 800039e:	d114      	bne.n	80003ca <fsm_simple_buttons_run+0x8e>
			count = (count == 9)? 0 : count+1;
 80003a0:	4b80      	ldr	r3, [pc, #512]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b09      	cmp	r3, #9
 80003a6:	d003      	beq.n	80003b0 <fsm_simple_buttons_run+0x74>
 80003a8:	4b7e      	ldr	r3, [pc, #504]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	e000      	b.n	80003b2 <fsm_simple_buttons_run+0x76>
 80003b0:	2300      	movs	r3, #0
 80003b2:	4a7c      	ldr	r2, [pc, #496]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80003b4:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 80003b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80003ba:	f000 fd31 	bl	8000e20 <setTimer1>
			count_long_pressed = 0;
 80003be:	4b7a      	ldr	r3, [pc, #488]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
			status = INC;
 80003c4:	4b76      	ldr	r3, [pc, #472]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 80003c6:	2203      	movs	r2, #3
 80003c8:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(2) == 1) {
 80003ca:	2002      	movs	r0, #2
 80003cc:	f7ff febe 	bl	800014c <isButtonPressed>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	f040 81e2 	bne.w	800079c <fsm_simple_buttons_run+0x460>
			count = (count == 0) ? 9 : count-1;
 80003d8:	4b72      	ldr	r3, [pc, #456]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d003      	beq.n	80003e8 <fsm_simple_buttons_run+0xac>
 80003e0:	4b70      	ldr	r3, [pc, #448]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	e000      	b.n	80003ea <fsm_simple_buttons_run+0xae>
 80003e8:	2309      	movs	r3, #9
 80003ea:	4a6e      	ldr	r2, [pc, #440]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80003ec:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 80003ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80003f2:	f000 fd15 	bl	8000e20 <setTimer1>
			count_long_pressed = 0;
 80003f6:	4b6c      	ldr	r3, [pc, #432]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
			status = DEC;
 80003fc:	4b68      	ldr	r3, [pc, #416]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 80003fe:	2204      	movs	r2, #4
 8000400:	601a      	str	r2, [r3, #0]
		}
		break;
 8000402:	e1cb      	b.n	800079c <fsm_simple_buttons_run+0x460>
	case INC:
		display7SEG(count);
 8000404:	4b67      	ldr	r3, [pc, #412]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f9dd 	bl	80007c8 <display7SEG>
		if (isButtonPressed(0) == 1) {
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff fe9c 	bl	800014c <isButtonPressed>
 8000414:	4603      	mov	r3, r0
 8000416:	2b01      	cmp	r3, #1
 8000418:	d105      	bne.n	8000426 <fsm_simple_buttons_run+0xea>
			count = 0;
 800041a:	4b62      	ldr	r3, [pc, #392]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
			status = RESET_STATE;
 8000420:	4b5f      	ldr	r3, [pc, #380]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000422:	2202      	movs	r2, #2
 8000424:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(2) == 1) {
 8000426:	2002      	movs	r0, #2
 8000428:	f7ff fe90 	bl	800014c <isButtonPressed>
 800042c:	4603      	mov	r3, r0
 800042e:	2b01      	cmp	r3, #1
 8000430:	d114      	bne.n	800045c <fsm_simple_buttons_run+0x120>
			count = (count == 0) ? 9 : count-1;
 8000432:	4b5c      	ldr	r3, [pc, #368]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d003      	beq.n	8000442 <fsm_simple_buttons_run+0x106>
 800043a:	4b5a      	ldr	r3, [pc, #360]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	e000      	b.n	8000444 <fsm_simple_buttons_run+0x108>
 8000442:	2309      	movs	r3, #9
 8000444:	4a57      	ldr	r2, [pc, #348]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000446:	6013      	str	r3, [r2, #0]
			count_long_pressed = 0;
 8000448:	4b57      	ldr	r3, [pc, #348]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 800044e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000452:	f000 fce5 	bl	8000e20 <setTimer1>
			status = DEC;
 8000456:	4b52      	ldr	r3, [pc, #328]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000458:	2204      	movs	r2, #4
 800045a:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fe75 	bl	800014c <isButtonPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d127      	bne.n	80004b8 <fsm_simple_buttons_run+0x17c>
			if (isButtonLongPressed(1) == 1) {
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff fe89 	bl	8000180 <isButtonLongPressed>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d110      	bne.n	8000496 <fsm_simple_buttons_run+0x15a>
				count_long_pressed ++;
 8000474:	4b4c      	ldr	r3, [pc, #304]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	4a4b      	ldr	r2, [pc, #300]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 800047c:	6013      	str	r3, [r2, #0]
				if (count_long_pressed == 3) {
 800047e:	4b4a      	ldr	r3, [pc, #296]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d118      	bne.n	80004b8 <fsm_simple_buttons_run+0x17c>
					setTimer1(10000);
 8000486:	f242 7010 	movw	r0, #10000	; 0x2710
 800048a:	f000 fcc9 	bl	8000e20 <setTimer1>
					status = LONG_PRESSED_INC;
 800048e:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000490:	2205      	movs	r2, #5
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	e010      	b.n	80004b8 <fsm_simple_buttons_run+0x17c>
				}
			}
			else {
				count = (count == 9) ? 0 : count+1;
 8000496:	4b43      	ldr	r3, [pc, #268]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b09      	cmp	r3, #9
 800049c:	d003      	beq.n	80004a6 <fsm_simple_buttons_run+0x16a>
 800049e:	4b41      	ldr	r3, [pc, #260]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	e000      	b.n	80004a8 <fsm_simple_buttons_run+0x16c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	4a3e      	ldr	r2, [pc, #248]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80004aa:	6013      	str	r3, [r2, #0]
				count_long_pressed = 0;
 80004ac:	4b3e      	ldr	r3, [pc, #248]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
				status = INC;
 80004b2:	4b3b      	ldr	r3, [pc, #236]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 80004b4:	2203      	movs	r2, #3
 80004b6:	601a      	str	r2, [r3, #0]
			}
		}
		if (timer1_flag == 1) {
 80004b8:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <fsm_simple_buttons_run+0x270>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	f040 816f 	bne.w	80007a0 <fsm_simple_buttons_run+0x464>
			setTimer1(1000);
 80004c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c6:	f000 fcab 	bl	8000e20 <setTimer1>
			status = AUTO;
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
		}
		break;
 80004d0:	e166      	b.n	80007a0 <fsm_simple_buttons_run+0x464>
	case DEC:
		display7SEG(count);
 80004d2:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f976 	bl	80007c8 <display7SEG>
		if (isButtonPressed(0) == 1) {
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff fe35 	bl	800014c <isButtonPressed>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d105      	bne.n	80004f4 <fsm_simple_buttons_run+0x1b8>
			count = 0;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
			status = RESET_STATE;
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff fe29 	bl	800014c <isButtonPressed>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d114      	bne.n	800052a <fsm_simple_buttons_run+0x1ee>
			count = (count == 9) ? 0 : count+1;
 8000500:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b09      	cmp	r3, #9
 8000506:	d003      	beq.n	8000510 <fsm_simple_buttons_run+0x1d4>
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	e000      	b.n	8000512 <fsm_simple_buttons_run+0x1d6>
 8000510:	2300      	movs	r3, #0
 8000512:	4a24      	ldr	r2, [pc, #144]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000514:	6013      	str	r3, [r2, #0]
			count_long_pressed = 0;
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 800051c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000520:	f000 fc7e 	bl	8000e20 <setTimer1>
			status = INC;
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000526:	2203      	movs	r2, #3
 8000528:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(2) == 1) {
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff fe0e 	bl	800014c <isButtonPressed>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d127      	bne.n	8000586 <fsm_simple_buttons_run+0x24a>
			if (isButtonLongPressed(2) == 1) {
 8000536:	2002      	movs	r0, #2
 8000538:	f7ff fe22 	bl	8000180 <isButtonLongPressed>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d110      	bne.n	8000564 <fsm_simple_buttons_run+0x228>
				count_long_pressed ++;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 800054a:	6013      	str	r3, [r2, #0]
				if (count_long_pressed == 3) {
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d118      	bne.n	8000586 <fsm_simple_buttons_run+0x24a>
					setTimer1(10000);
 8000554:	f242 7010 	movw	r0, #10000	; 0x2710
 8000558:	f000 fc62 	bl	8000e20 <setTimer1>
					status = LONG_PRESSED_DEC;
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 800055e:	2206      	movs	r2, #6
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	e010      	b.n	8000586 <fsm_simple_buttons_run+0x24a>
				}
			}
			else {
				count = (count == 0) ? 9 : count-1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d003      	beq.n	8000574 <fsm_simple_buttons_run+0x238>
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	e000      	b.n	8000576 <fsm_simple_buttons_run+0x23a>
 8000574:	2309      	movs	r3, #9
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <fsm_simple_buttons_run+0x268>)
 8000578:	6013      	str	r3, [r2, #0]
				count_long_pressed = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <fsm_simple_buttons_run+0x26c>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
				status = DEC;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 8000582:	2204      	movs	r2, #4
 8000584:	601a      	str	r2, [r3, #0]
			}
		}
		if (timer1_flag == 1) {
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <fsm_simple_buttons_run+0x270>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	f040 810a 	bne.w	80007a4 <fsm_simple_buttons_run+0x468>
			setTimer1(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f000 fc44 	bl	8000e20 <setTimer1>
			status = AUTO;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <fsm_simple_buttons_run+0x264>)
 800059a:	2207      	movs	r2, #7
 800059c:	601a      	str	r2, [r3, #0]
		}
		break;
 800059e:	e101      	b.n	80007a4 <fsm_simple_buttons_run+0x468>
 80005a0:	20000080 	.word	0x20000080
 80005a4:	20000084 	.word	0x20000084
 80005a8:	20000088 	.word	0x20000088
 80005ac:	200000d8 	.word	0x200000d8
	case LONG_PRESSED_INC:
		display7SEG(count);
 80005b0:	4b81      	ldr	r3, [pc, #516]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f907 	bl	80007c8 <display7SEG>
		if (isButtonPressed(0) == 1) {
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fdc6 	bl	800014c <isButtonPressed>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d105      	bne.n	80005d2 <fsm_simple_buttons_run+0x296>
			count = 0;
 80005c6:	4b7c      	ldr	r3, [pc, #496]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
			status = RESET_STATE;
 80005cc:	4b7b      	ldr	r3, [pc, #492]	; (80007bc <fsm_simple_buttons_run+0x480>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fdba 	bl	800014c <isButtonPressed>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10e      	bne.n	80005fc <fsm_simple_buttons_run+0x2c0>
			count = (count == 9) ? 0 : count+1;
 80005de:	4b76      	ldr	r3, [pc, #472]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b09      	cmp	r3, #9
 80005e4:	d003      	beq.n	80005ee <fsm_simple_buttons_run+0x2b2>
 80005e6:	4b74      	ldr	r3, [pc, #464]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	e000      	b.n	80005f0 <fsm_simple_buttons_run+0x2b4>
 80005ee:	2300      	movs	r3, #0
 80005f0:	4a71      	ldr	r2, [pc, #452]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80005f2:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 80005f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005f8:	f000 fc12 	bl	8000e20 <setTimer1>
		}
		if (isButtonPressed(2) == 1) {
 80005fc:	2002      	movs	r0, #2
 80005fe:	f7ff fda5 	bl	800014c <isButtonPressed>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d114      	bne.n	8000632 <fsm_simple_buttons_run+0x2f6>
			count = (count == 0) ? 9 : count-1;
 8000608:	4b6b      	ldr	r3, [pc, #428]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <fsm_simple_buttons_run+0x2dc>
 8000610:	4b69      	ldr	r3, [pc, #420]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	e000      	b.n	800061a <fsm_simple_buttons_run+0x2de>
 8000618:	2309      	movs	r3, #9
 800061a:	4a67      	ldr	r2, [pc, #412]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800061c:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 800061e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000622:	f000 fbfd 	bl	8000e20 <setTimer1>
			count_long_pressed = 0;
 8000626:	4b66      	ldr	r3, [pc, #408]	; (80007c0 <fsm_simple_buttons_run+0x484>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
			status = DEC;
 800062c:	4b63      	ldr	r3, [pc, #396]	; (80007bc <fsm_simple_buttons_run+0x480>)
 800062e:	2204      	movs	r2, #4
 8000630:	601a      	str	r2, [r3, #0]
		}
		if (timer1_flag == 1) {
 8000632:	4b64      	ldr	r3, [pc, #400]	; (80007c4 <fsm_simple_buttons_run+0x488>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	f040 80b6 	bne.w	80007a8 <fsm_simple_buttons_run+0x46c>
			setTimer1(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000640:	f000 fbee 	bl	8000e20 <setTimer1>
			status = AUTO;
 8000644:	4b5d      	ldr	r3, [pc, #372]	; (80007bc <fsm_simple_buttons_run+0x480>)
 8000646:	2207      	movs	r2, #7
 8000648:	601a      	str	r2, [r3, #0]
		}
		break;
 800064a:	e0ad      	b.n	80007a8 <fsm_simple_buttons_run+0x46c>
	case LONG_PRESSED_DEC:
		display7SEG(count);
 800064c:	4b5a      	ldr	r3, [pc, #360]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f8b9 	bl	80007c8 <display7SEG>
		if (isButtonPressed(0) == 1) {
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff fd78 	bl	800014c <isButtonPressed>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d105      	bne.n	800066e <fsm_simple_buttons_run+0x332>
			count = 0;
 8000662:	4b55      	ldr	r3, [pc, #340]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
			status = RESET_STATE;
 8000668:	4b54      	ldr	r3, [pc, #336]	; (80007bc <fsm_simple_buttons_run+0x480>)
 800066a:	2202      	movs	r2, #2
 800066c:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fd6c 	bl	800014c <isButtonPressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d114      	bne.n	80006a4 <fsm_simple_buttons_run+0x368>
			count = (count == 9) ? 0 : count+1;
 800067a:	4b4f      	ldr	r3, [pc, #316]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b09      	cmp	r3, #9
 8000680:	d003      	beq.n	800068a <fsm_simple_buttons_run+0x34e>
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	e000      	b.n	800068c <fsm_simple_buttons_run+0x350>
 800068a:	2300      	movs	r3, #0
 800068c:	4a4a      	ldr	r2, [pc, #296]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800068e:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 8000690:	f242 7010 	movw	r0, #10000	; 0x2710
 8000694:	f000 fbc4 	bl	8000e20 <setTimer1>
			count_long_pressed = 0;
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <fsm_simple_buttons_run+0x484>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
			status = INC;
 800069e:	4b47      	ldr	r3, [pc, #284]	; (80007bc <fsm_simple_buttons_run+0x480>)
 80006a0:	2203      	movs	r2, #3
 80006a2:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(2) == 1) {
 80006a4:	2002      	movs	r0, #2
 80006a6:	f7ff fd51 	bl	800014c <isButtonPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d10e      	bne.n	80006ce <fsm_simple_buttons_run+0x392>
			count = (count == 0) ? 9 : count-1;
 80006b0:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <fsm_simple_buttons_run+0x384>
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	e000      	b.n	80006c2 <fsm_simple_buttons_run+0x386>
 80006c0:	2309      	movs	r3, #9
 80006c2:	4a3d      	ldr	r2, [pc, #244]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80006c4:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 80006c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80006ca:	f000 fba9 	bl	8000e20 <setTimer1>
		}
		if (timer1_flag == 1) {
 80006ce:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <fsm_simple_buttons_run+0x488>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d16a      	bne.n	80007ac <fsm_simple_buttons_run+0x470>
			setTimer1(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f000 fba1 	bl	8000e20 <setTimer1>
			status = AUTO;
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <fsm_simple_buttons_run+0x480>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
		}
		break;
 80006e4:	e062      	b.n	80007ac <fsm_simple_buttons_run+0x470>
	case AUTO:
		display7SEG(count);
 80006e6:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f86c 	bl	80007c8 <display7SEG>
		if (isButtonPressed(0) == 1) {
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fd2b 	bl	800014c <isButtonPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d105      	bne.n	8000708 <fsm_simple_buttons_run+0x3cc>
			count = 0;
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
			status = RESET_STATE;
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <fsm_simple_buttons_run+0x480>)
 8000704:	2202      	movs	r2, #2
 8000706:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff fd1f 	bl	800014c <isButtonPressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d114      	bne.n	800073e <fsm_simple_buttons_run+0x402>
			count = (count == 9) ? 0 : count+1;
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d003      	beq.n	8000724 <fsm_simple_buttons_run+0x3e8>
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	e000      	b.n	8000726 <fsm_simple_buttons_run+0x3ea>
 8000724:	2300      	movs	r3, #0
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000728:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 800072a:	f242 7010 	movw	r0, #10000	; 0x2710
 800072e:	f000 fb77 	bl	8000e20 <setTimer1>
			count_long_pressed = 0;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <fsm_simple_buttons_run+0x484>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
			status = INC;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <fsm_simple_buttons_run+0x480>)
 800073a:	2203      	movs	r2, #3
 800073c:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(2) == 1) {
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff fd04 	bl	800014c <isButtonPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d114      	bne.n	8000774 <fsm_simple_buttons_run+0x438>
			count = (count == 0) ? 9 : count-1;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <fsm_simple_buttons_run+0x41e>
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	e000      	b.n	800075c <fsm_simple_buttons_run+0x420>
 800075a:	2309      	movs	r3, #9
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800075e:	6013      	str	r3, [r2, #0]
			setTimer1(10000);
 8000760:	f242 7010 	movw	r0, #10000	; 0x2710
 8000764:	f000 fb5c 	bl	8000e20 <setTimer1>
			count_long_pressed = 0;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <fsm_simple_buttons_run+0x484>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			status = DEC;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <fsm_simple_buttons_run+0x480>)
 8000770:	2204      	movs	r2, #4
 8000772:	601a      	str	r2, [r3, #0]
		}
		if (timer1_flag == 1) {
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <fsm_simple_buttons_run+0x488>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d119      	bne.n	80007b0 <fsm_simple_buttons_run+0x474>
			if (count > 0) count --;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd04      	ble.n	800078e <fsm_simple_buttons_run+0x452>
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <fsm_simple_buttons_run+0x47c>)
 800078c:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 800078e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000792:	f000 fb45 	bl	8000e20 <setTimer1>
		}
		break;
 8000796:	e00b      	b.n	80007b0 <fsm_simple_buttons_run+0x474>
	default:
		break;
 8000798:	bf00      	nop
 800079a:	e00a      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
		break;
 800079c:	bf00      	nop
 800079e:	e008      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
		break;
 80007a0:	bf00      	nop
 80007a2:	e006      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
		break;
 80007a4:	bf00      	nop
 80007a6:	e004      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
		break;
 80007a8:	bf00      	nop
 80007aa:	e002      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
		break;
 80007ac:	bf00      	nop
 80007ae:	e000      	b.n	80007b2 <fsm_simple_buttons_run+0x476>
		break;
 80007b0:	bf00      	nop
	}
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000084 	.word	0x20000084
 80007bc:	20000080 	.word	0x20000080
 80007c0:	20000088 	.word	0x20000088
 80007c4:	200000d8 	.word	0x200000d8

080007c8 <display7SEG>:
 *      Author: HP
 */

#include"led_display.h"

void display7SEG(int num) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	switch(num) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	f200 8180 	bhi.w	8000ad8 <display7SEG+0x310>
 80007d8:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <display7SEG+0x18>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	08000809 	.word	0x08000809
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000899 	.word	0x08000899
 80007ec:	080008e1 	.word	0x080008e1
 80007f0:	08000929 	.word	0x08000929
 80007f4:	08000971 	.word	0x08000971
 80007f8:	080009b9 	.word	0x080009b9
 80007fc:	08000a01 	.word	0x08000a01
 8000800:	08000a49 	.word	0x08000a49
 8000804:	08000a91 	.word	0x08000a91
	case 0:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	48b4      	ldr	r0, [pc, #720]	; (8000ae0 <display7SEG+0x318>)
 800080e:	f000 fea4 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	48b2      	ldr	r0, [pc, #712]	; (8000ae0 <display7SEG+0x318>)
 8000818:	f000 fe9f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	48af      	ldr	r0, [pc, #700]	; (8000ae0 <display7SEG+0x318>)
 8000822:	f000 fe9a 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	48ad      	ldr	r0, [pc, #692]	; (8000ae0 <display7SEG+0x318>)
 800082c:	f000 fe95 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2110      	movs	r1, #16
 8000834:	48aa      	ldr	r0, [pc, #680]	; (8000ae0 <display7SEG+0x318>)
 8000836:	f000 fe90 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	48a8      	ldr	r0, [pc, #672]	; (8000ae0 <display7SEG+0x318>)
 8000840:	f000 fe8b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	48a5      	ldr	r0, [pc, #660]	; (8000ae0 <display7SEG+0x318>)
 800084a:	f000 fe86 	bl	800155a <HAL_GPIO_WritePin>
		break;
 800084e:	e143      	b.n	8000ad8 <display7SEG+0x310>
	case 1:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	48a2      	ldr	r0, [pc, #648]	; (8000ae0 <display7SEG+0x318>)
 8000856:	f000 fe80 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2102      	movs	r1, #2
 800085e:	48a0      	ldr	r0, [pc, #640]	; (8000ae0 <display7SEG+0x318>)
 8000860:	f000 fe7b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	489d      	ldr	r0, [pc, #628]	; (8000ae0 <display7SEG+0x318>)
 800086a:	f000 fe76 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2108      	movs	r1, #8
 8000872:	489b      	ldr	r0, [pc, #620]	; (8000ae0 <display7SEG+0x318>)
 8000874:	f000 fe71 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	4898      	ldr	r0, [pc, #608]	; (8000ae0 <display7SEG+0x318>)
 800087e:	f000 fe6c 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2120      	movs	r1, #32
 8000886:	4896      	ldr	r0, [pc, #600]	; (8000ae0 <display7SEG+0x318>)
 8000888:	f000 fe67 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4893      	ldr	r0, [pc, #588]	; (8000ae0 <display7SEG+0x318>)
 8000892:	f000 fe62 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000896:	e11f      	b.n	8000ad8 <display7SEG+0x310>
	case 2:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	4890      	ldr	r0, [pc, #576]	; (8000ae0 <display7SEG+0x318>)
 800089e:	f000 fe5c 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2102      	movs	r1, #2
 80008a6:	488e      	ldr	r0, [pc, #568]	; (8000ae0 <display7SEG+0x318>)
 80008a8:	f000 fe57 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2104      	movs	r1, #4
 80008b0:	488b      	ldr	r0, [pc, #556]	; (8000ae0 <display7SEG+0x318>)
 80008b2:	f000 fe52 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4889      	ldr	r0, [pc, #548]	; (8000ae0 <display7SEG+0x318>)
 80008bc:	f000 fe4d 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2110      	movs	r1, #16
 80008c4:	4886      	ldr	r0, [pc, #536]	; (8000ae0 <display7SEG+0x318>)
 80008c6:	f000 fe48 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2120      	movs	r1, #32
 80008ce:	4884      	ldr	r0, [pc, #528]	; (8000ae0 <display7SEG+0x318>)
 80008d0:	f000 fe43 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	4881      	ldr	r0, [pc, #516]	; (8000ae0 <display7SEG+0x318>)
 80008da:	f000 fe3e 	bl	800155a <HAL_GPIO_WritePin>
		break;
 80008de:	e0fb      	b.n	8000ad8 <display7SEG+0x310>
	case 3:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	487e      	ldr	r0, [pc, #504]	; (8000ae0 <display7SEG+0x318>)
 80008e6:	f000 fe38 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	487c      	ldr	r0, [pc, #496]	; (8000ae0 <display7SEG+0x318>)
 80008f0:	f000 fe33 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	4879      	ldr	r0, [pc, #484]	; (8000ae0 <display7SEG+0x318>)
 80008fa:	f000 fe2e 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	4877      	ldr	r0, [pc, #476]	; (8000ae0 <display7SEG+0x318>)
 8000904:	f000 fe29 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	4874      	ldr	r0, [pc, #464]	; (8000ae0 <display7SEG+0x318>)
 800090e:	f000 fe24 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2120      	movs	r1, #32
 8000916:	4872      	ldr	r0, [pc, #456]	; (8000ae0 <display7SEG+0x318>)
 8000918:	f000 fe1f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	486f      	ldr	r0, [pc, #444]	; (8000ae0 <display7SEG+0x318>)
 8000922:	f000 fe1a 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000926:	e0d7      	b.n	8000ad8 <display7SEG+0x310>
	case 4:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	486c      	ldr	r0, [pc, #432]	; (8000ae0 <display7SEG+0x318>)
 800092e:	f000 fe14 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2102      	movs	r1, #2
 8000936:	486a      	ldr	r0, [pc, #424]	; (8000ae0 <display7SEG+0x318>)
 8000938:	f000 fe0f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	4867      	ldr	r0, [pc, #412]	; (8000ae0 <display7SEG+0x318>)
 8000942:	f000 fe0a 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2108      	movs	r1, #8
 800094a:	4865      	ldr	r0, [pc, #404]	; (8000ae0 <display7SEG+0x318>)
 800094c:	f000 fe05 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2110      	movs	r1, #16
 8000954:	4862      	ldr	r0, [pc, #392]	; (8000ae0 <display7SEG+0x318>)
 8000956:	f000 fe00 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	4860      	ldr	r0, [pc, #384]	; (8000ae0 <display7SEG+0x318>)
 8000960:	f000 fdfb 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	485d      	ldr	r0, [pc, #372]	; (8000ae0 <display7SEG+0x318>)
 800096a:	f000 fdf6 	bl	800155a <HAL_GPIO_WritePin>
		break;
 800096e:	e0b3      	b.n	8000ad8 <display7SEG+0x310>
	case 5:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	485a      	ldr	r0, [pc, #360]	; (8000ae0 <display7SEG+0x318>)
 8000976:	f000 fdf0 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	4858      	ldr	r0, [pc, #352]	; (8000ae0 <display7SEG+0x318>)
 8000980:	f000 fdeb 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2104      	movs	r1, #4
 8000988:	4855      	ldr	r0, [pc, #340]	; (8000ae0 <display7SEG+0x318>)
 800098a:	f000 fde6 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4853      	ldr	r0, [pc, #332]	; (8000ae0 <display7SEG+0x318>)
 8000994:	f000 fde1 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4850      	ldr	r0, [pc, #320]	; (8000ae0 <display7SEG+0x318>)
 800099e:	f000 fddc 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <display7SEG+0x318>)
 80009a8:	f000 fdd7 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	484b      	ldr	r0, [pc, #300]	; (8000ae0 <display7SEG+0x318>)
 80009b2:	f000 fdd2 	bl	800155a <HAL_GPIO_WritePin>
		break;
 80009b6:	e08f      	b.n	8000ad8 <display7SEG+0x310>
	case 6:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	4848      	ldr	r0, [pc, #288]	; (8000ae0 <display7SEG+0x318>)
 80009be:	f000 fdcc 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2102      	movs	r1, #2
 80009c6:	4846      	ldr	r0, [pc, #280]	; (8000ae0 <display7SEG+0x318>)
 80009c8:	f000 fdc7 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2104      	movs	r1, #4
 80009d0:	4843      	ldr	r0, [pc, #268]	; (8000ae0 <display7SEG+0x318>)
 80009d2:	f000 fdc2 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <display7SEG+0x318>)
 80009dc:	f000 fdbd 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2110      	movs	r1, #16
 80009e4:	483e      	ldr	r0, [pc, #248]	; (8000ae0 <display7SEG+0x318>)
 80009e6:	f000 fdb8 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	483c      	ldr	r0, [pc, #240]	; (8000ae0 <display7SEG+0x318>)
 80009f0:	f000 fdb3 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	4839      	ldr	r0, [pc, #228]	; (8000ae0 <display7SEG+0x318>)
 80009fa:	f000 fdae 	bl	800155a <HAL_GPIO_WritePin>
		break;
 80009fe:	e06b      	b.n	8000ad8 <display7SEG+0x310>
	case 7:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <display7SEG+0x318>)
 8000a06:	f000 fda8 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4834      	ldr	r0, [pc, #208]	; (8000ae0 <display7SEG+0x318>)
 8000a10:	f000 fda3 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2104      	movs	r1, #4
 8000a18:	4831      	ldr	r0, [pc, #196]	; (8000ae0 <display7SEG+0x318>)
 8000a1a:	f000 fd9e 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2108      	movs	r1, #8
 8000a22:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <display7SEG+0x318>)
 8000a24:	f000 fd99 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	482c      	ldr	r0, [pc, #176]	; (8000ae0 <display7SEG+0x318>)
 8000a2e:	f000 fd94 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2120      	movs	r1, #32
 8000a36:	482a      	ldr	r0, [pc, #168]	; (8000ae0 <display7SEG+0x318>)
 8000a38:	f000 fd8f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <display7SEG+0x318>)
 8000a42:	f000 fd8a 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000a46:	e047      	b.n	8000ad8 <display7SEG+0x310>
	case 8:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <display7SEG+0x318>)
 8000a4e:	f000 fd84 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2102      	movs	r1, #2
 8000a56:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <display7SEG+0x318>)
 8000a58:	f000 fd7f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <display7SEG+0x318>)
 8000a62:	f000 fd7a 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <display7SEG+0x318>)
 8000a6c:	f000 fd75 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <display7SEG+0x318>)
 8000a76:	f000 fd70 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <display7SEG+0x318>)
 8000a80:	f000 fd6b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <display7SEG+0x318>)
 8000a8a:	f000 fd66 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000a8e:	e023      	b.n	8000ad8 <display7SEG+0x310>
	case 9:
		HAL_GPIO_WritePin(SEG7_PORT, SEG0_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <display7SEG+0x318>)
 8000a96:	f000 fd60 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG1_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <display7SEG+0x318>)
 8000aa0:	f000 fd5b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG2_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <display7SEG+0x318>)
 8000aaa:	f000 fd56 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG3_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <display7SEG+0x318>)
 8000ab4:	f000 fd51 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG4_Pin, SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <display7SEG+0x318>)
 8000abe:	f000 fd4c 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG5_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <display7SEG+0x318>)
 8000ac8:	f000 fd47 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG7_PORT, SEG6_Pin, RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <display7SEG+0x318>)
 8000ad2:	f000 fd42 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000ad6:	bf00      	nop
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <led_blinky>:

void led_blinky() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <led_blinky+0x20>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d107      	bne.n	8000b00 <led_blinky+0x1c>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000af0:	2120      	movs	r1, #32
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <led_blinky+0x24>)
 8000af4:	f000 fd49 	bl	800158a <HAL_GPIO_TogglePin>
		setTimer2(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 f9aa 	bl	8000e54 <setTimer2>
	}
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000e0 	.word	0x200000e0
 8000b08:	40010800 	.word	0x40010800

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fa20 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f818 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f89e 	bl	8000c58 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b1c:	f000 f850 	bl	8000bc0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <main+0x34>)
 8000b22:	f001 f983 	bl	8001e2c <HAL_TIM_Base_Start_IT>
  status = INIT;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <main+0x38>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
  setTimer2(1000);
 8000b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b30:	f000 f990 	bl	8000e54 <setTimer2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	     led_blinky();
 8000b34:	f7ff ffd6 	bl	8000ae4 <led_blinky>
	  	 fsm_simple_buttons_run();
 8000b38:	f7ff fc00 	bl	800033c <fsm_simple_buttons_run>
	     led_blinky();
 8000b3c:	e7fa      	b.n	8000b34 <main+0x28>
 8000b3e:	bf00      	nop
 8000b40:	2000008c 	.word	0x2000008c
 8000b44:	20000080 	.word	0x20000080

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b090      	sub	sp, #64	; 0x40
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	2228      	movs	r2, #40	; 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fd20 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b72:	2310      	movs	r3, #16
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd1c 	bl	80015bc <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f8c5 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 ff8a 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 f8b1 	bl	8000d18 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3740      	adds	r7, #64	; 0x40
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000be6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bf4:	2209      	movs	r2, #9
 8000bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c04:	4813      	ldr	r0, [pc, #76]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c06:	f001 f8c1 	bl	8001d8c <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c10:	f000 f882 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c22:	f001 fa57 	bl	80020d4 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 f874 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c3e:	f001 fc1f 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f866 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000008c 	.word	0x2000008c

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_GPIO_Init+0xb4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <MX_GPIO_Init+0xb4>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_GPIO_Init+0xb4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_GPIO_Init+0xb4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <MX_GPIO_Init+0xb4>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_GPIO_Init+0xb4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_GPIO_Init+0xb8>)
 8000ca2:	f000 fc5a 	bl	800155a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	217f      	movs	r1, #127	; 0x7f
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <MX_GPIO_Init+0xbc>)
 8000cac:	f000 fc55 	bl	800155a <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4812      	ldr	r0, [pc, #72]	; (8000d10 <MX_GPIO_Init+0xb8>)
 8000cc8:	f000 fab4 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000ccc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <MX_GPIO_Init+0xb8>)
 8000ce2:	f000 faa7 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000ce6:	237f      	movs	r3, #127	; 0x7f
 8000ce8:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_GPIO_Init+0xbc>)
 8000cfe:	f000 fa99 	bl	8001234 <HAL_GPIO_Init>

}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_MspInit+0x40>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_MspInit+0x40>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_MspInit+0x40>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_MspInit+0x40>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_MspInit+0x40>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_MspInit+0x40>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	d113      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_TIM_Base_MspInit+0x44>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <HAL_TIM_Base_MspInit+0x44>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_TIM_Base_MspInit+0x44>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	201c      	movs	r0, #28
 8000d98:	f000 fa15 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d9c:	201c      	movs	r0, #28
 8000d9e:	f000 fa2e 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f8f3 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM2_IRQHandler+0x10>)
 8000e06:	f001 f85d 	bl	8001ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000008c 	.word	0x2000008c

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;

int tick = 10;

void setTimer1 (int duration) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/tick;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <setTimer1+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e32:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <setTimer1+0x2c>)
 8000e34:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <setTimer1+0x30>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000040 	.word	0x20000040
 8000e4c:	200000d4 	.word	0x200000d4
 8000e50:	200000d8 	.word	0x200000d8

08000e54 <setTimer2>:

void setTimer2 (int duration) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/tick;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <setTimer2+0x28>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e66:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <setTimer2+0x2c>)
 8000e68:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <setTimer2+0x30>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000040 	.word	0x20000040
 8000e80:	200000dc 	.word	0x200000dc
 8000e84:	200000e0 	.word	0x200000e0

08000e88 <timerRun>:
//void clearTimer1() {
//	timer1_counter = 0;
//	timer1_flag = 0;
//}

void timerRun (){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <timerRun+0x4c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dd0b      	ble.n	8000eac <timerRun+0x24>
		timer1_counter--;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <timerRun+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <timerRun+0x4c>)
 8000e9c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <timerRun+0x4c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dc02      	bgt.n	8000eac <timerRun+0x24>
			timer1_flag  = 1;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <timerRun+0x50>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <timerRun+0x54>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dd0b      	ble.n	8000ecc <timerRun+0x44>
		timer2_counter--;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <timerRun+0x54>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <timerRun+0x54>)
 8000ebc:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <timerRun+0x54>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	dc02      	bgt.n	8000ecc <timerRun+0x44>
			timer2_flag  = 1;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <timerRun+0x58>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200000d4 	.word	0x200000d4
 8000ed8:	200000d8 	.word	0x200000d8
 8000edc:	200000dc 	.word	0x200000dc
 8000ee0:	200000e0 	.word	0x200000e0

08000ee4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 ) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef4:	d101      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x16>
		//button_reading() ;
		getKeyInput();
 8000ef6:	f7ff f967 	bl	80001c8 <getKeyInput>
	}
	timerRun();
 8000efa:	f7ff ffc5 	bl	8000e88 <timerRun>

}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f2e:	f7ff ff71 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f001 fb0f 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff fde9 	bl	8000b0c <main>
  bx lr
 8000f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000f44:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 8000f48:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000f4c:	200000e8 	.word	0x200000e8

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x28>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f923 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fed8 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f93b 	bl	800121a <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f903 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000003c 	.word	0x2000003c
 8000fd8:	20000048 	.word	0x20000048
 8000fdc:	20000044 	.word	0x20000044

08000fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x1c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x20>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <HAL_IncTick+0x20>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000048 	.word	0x20000048
 8001000:	200000e4 	.word	0x200000e4

08001004 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_GetTick+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	200000e4 	.word	0x200000e4

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <__NVIC_EnableIRQ+0x34>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff2d 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff42 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff35 	bl	800107c <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e161      	b.n	800150c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001248:	2201      	movs	r2, #1
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8150 	bne.w	8001506 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a97      	ldr	r2, [pc, #604]	; (80014c8 <HAL_GPIO_Init+0x294>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d05e      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001270:	4a95      	ldr	r2, [pc, #596]	; (80014c8 <HAL_GPIO_Init+0x294>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d875      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001276:	4a95      	ldr	r2, [pc, #596]	; (80014cc <HAL_GPIO_Init+0x298>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d058      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 800127c:	4a93      	ldr	r2, [pc, #588]	; (80014cc <HAL_GPIO_Init+0x298>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d86f      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001282:	4a93      	ldr	r2, [pc, #588]	; (80014d0 <HAL_GPIO_Init+0x29c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d052      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001288:	4a91      	ldr	r2, [pc, #580]	; (80014d0 <HAL_GPIO_Init+0x29c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d869      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800128e:	4a91      	ldr	r2, [pc, #580]	; (80014d4 <HAL_GPIO_Init+0x2a0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d04c      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001294:	4a8f      	ldr	r2, [pc, #572]	; (80014d4 <HAL_GPIO_Init+0x2a0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d863      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800129a:	4a8f      	ldr	r2, [pc, #572]	; (80014d8 <HAL_GPIO_Init+0x2a4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d046      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 80012a0:	4a8d      	ldr	r2, [pc, #564]	; (80014d8 <HAL_GPIO_Init+0x2a4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d85d      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d82a      	bhi.n	8001300 <HAL_GPIO_Init+0xcc>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d859      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <HAL_GPIO_Init+0x80>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	08001309 	.word	0x08001309
 80012bc:	0800131b 	.word	0x0800131b
 80012c0:	0800135d 	.word	0x0800135d
 80012c4:	08001363 	.word	0x08001363
 80012c8:	08001363 	.word	0x08001363
 80012cc:	08001363 	.word	0x08001363
 80012d0:	08001363 	.word	0x08001363
 80012d4:	08001363 	.word	0x08001363
 80012d8:	08001363 	.word	0x08001363
 80012dc:	08001363 	.word	0x08001363
 80012e0:	08001363 	.word	0x08001363
 80012e4:	08001363 	.word	0x08001363
 80012e8:	08001363 	.word	0x08001363
 80012ec:	08001363 	.word	0x08001363
 80012f0:	08001363 	.word	0x08001363
 80012f4:	08001363 	.word	0x08001363
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001325 	.word	0x08001325
 8001300:	4a76      	ldr	r2, [pc, #472]	; (80014dc <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001306:	e02c      	b.n	8001362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e029      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	3304      	adds	r3, #4
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e024      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	3308      	adds	r3, #8
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e01f      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	330c      	adds	r3, #12
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e01a      	b.n	8001364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001336:	2304      	movs	r3, #4
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e013      	b.n	8001364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	611a      	str	r2, [r3, #16]
          break;
 800134e:	e009      	b.n	8001364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	615a      	str	r2, [r3, #20]
          break;
 800135a:	e003      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x130>
          break;
 8001362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2bff      	cmp	r3, #255	; 0xff
 8001368:	d801      	bhi.n	800136e <HAL_GPIO_Init+0x13a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_Init+0x13e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d802      	bhi.n	8001380 <HAL_GPIO_Init+0x14c>
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x152>
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	3b08      	subs	r3, #8
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	210f      	movs	r1, #15
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80a9 	beq.w	8001506 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b4:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013cc:	4a45      	ldr	r2, [pc, #276]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3d      	ldr	r2, [pc, #244]	; (80014e8 <HAL_GPIO_Init+0x2b4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1e0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3c      	ldr	r2, [pc, #240]	; (80014ec <HAL_GPIO_Init+0x2b8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1dc>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <HAL_GPIO_Init+0x2bc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1d8>
 8001408:	2302      	movs	r3, #2
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 800140c:	2303      	movs	r3, #3
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001414:	2300      	movs	r3, #0
 8001416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001426:	492f      	ldr	r1, [pc, #188]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	492b      	ldr	r1, [pc, #172]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4927      	ldr	r1, [pc, #156]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001458:	4013      	ands	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4921      	ldr	r1, [pc, #132]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	491d      	ldr	r1, [pc, #116]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001480:	4013      	ands	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	4917      	ldr	r1, [pc, #92]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4913      	ldr	r1, [pc, #76]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01f      	beq.n	80014f8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	490d      	ldr	r1, [pc, #52]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
 80014c4:	e01f      	b.n	8001506 <HAL_GPIO_Init+0x2d2>
 80014c6:	bf00      	nop
 80014c8:	10320000 	.word	0x10320000
 80014cc:	10310000 	.word	0x10310000
 80014d0:	10220000 	.word	0x10220000
 80014d4:	10210000 	.word	0x10210000
 80014d8:	10120000 	.word	0x10120000
 80014dc:	10110000 	.word	0x10110000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40010c00 	.word	0x40010c00
 80014f0:	40011000 	.word	0x40011000
 80014f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_GPIO_Init+0x2f4>)
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	43db      	mvns	r3, r3
 8001500:	4909      	ldr	r1, [pc, #36]	; (8001528 <HAL_GPIO_Init+0x2f4>)
 8001502:	4013      	ands	r3, r2
 8001504:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	f47f ae96 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	372c      	adds	r7, #44	; 0x2c
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e001      	b.n	800154e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]
 8001566:	4613      	mov	r3, r2
 8001568:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156a:	787b      	ldrb	r3, [r7, #1]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001576:	e003      	b.n	8001580 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159c:	887a      	ldrh	r2, [r7, #2]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	041a      	lsls	r2, r3, #16
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	400b      	ands	r3, r1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	611a      	str	r2, [r3, #16]
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e272      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8087 	beq.w	80016ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d00c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e8:	4b8f      	ldr	r3, [pc, #572]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d112      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
 80015f4:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d10b      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x12c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d168      	bne.n	80016e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e24c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x76>
 8001624:	4b80      	ldr	r3, [pc, #512]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a7f      	ldr	r2, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e02e      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a77      	ldr	r2, [pc, #476]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0xbc>
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a71      	ldr	r2, [pc, #452]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a67      	ldr	r2, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fcb4 	bl	8001004 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcb0 	bl	8001004 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e200      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe4>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fca0 	bl	8001004 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc9c 	bl	8001004 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1ec      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x10c>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4939      	ldr	r1, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fc55 	bl	8001004 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc51 	bl	8001004 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4927      	ldr	r1, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc34 	bl	8001004 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc30 	bl	8001004 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e180      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03a      	beq.n	8001840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc14 	bl	8001004 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc10 	bl	8001004 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e160      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 faa6 	bl	8001d50 <RCC_Delay>
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fbfa 	bl	8001004 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fbf6 	bl	8001004 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d908      	bls.n	8001834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e146      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	42420000 	.word	0x42420000
 8001830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b92      	ldr	r3, [pc, #584]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e9      	bne.n	8001814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a6 	beq.w	800199a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b7f      	ldr	r3, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7e      	ldr	r2, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fbb7 	bl	8001004 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fbb3 	bl	8001004 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e103      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x312>
 80018c0:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a6e      	ldr	r2, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	e02d      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x334>
 80018d6:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a66      	ldr	r2, [pc, #408]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e01c      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x356>
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a60      	ldr	r2, [pc, #384]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 8001912:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d015      	beq.n	800195e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb67 	bl	8001004 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff fb63 	bl	8001004 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0b1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCC_OscConfig+0x37e>
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fb51 	bl	8001004 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fb4d 	bl	8001004 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e09b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	4b40      	ldr	r3, [pc, #256]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d061      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d146      	bne.n	8001a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fb21 	bl	8001004 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fb1d 	bl	8001004 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e06d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4921      	ldr	r1, [pc, #132]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a19      	ldr	r1, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	430b      	orrs	r3, r1
 8001a12:	491b      	ldr	r1, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff faf1 	bl	8001004 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff faed 	bl	8001004 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46a>
 8001a44:	e035      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fada 	bl	8001004 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fad6 	bl	8001004 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e026      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x498>
 8001a72:	e01e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e019      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x500>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4965      	ldr	r1, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff fa28 	bl	8001004 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff fa24 	bl	8001004 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4922      	ldr	r1, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1cc>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f986 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	080025d4 	.word	0x080025d4
 8001c8c:	2000003c 	.word	0x2000003c
 8001c90:	20000044 	.word	0x20000044

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b490      	push	{r4, r7}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c9c:	1d3c      	adds	r4, r7, #4
 8001c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca4:	f240 2301 	movw	r3, #513	; 0x201
 8001ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x46>
 8001cd2:	e02b      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cd6:	623b      	str	r3, [r7, #32]
      break;
 8001cd8:	e02b      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	0c9b      	lsrs	r3, r3, #18
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3328      	adds	r3, #40	; 0x28
 8001ce4:	443b      	add	r3, r7
 8001ce6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d012      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	0c5b      	lsrs	r3, r3, #17
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	3328      	adds	r3, #40	; 0x28
 8001d02:	443b      	add	r3, r7
 8001d04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d0e:	fb03 f202 	mul.w	r2, r3, r2
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1a:	e004      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	623b      	str	r3, [r7, #32]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d2e:	623b      	str	r3, [r7, #32]
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	6a3b      	ldr	r3, [r7, #32]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc90      	pop	{r4, r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	080025c4 	.word	0x080025c4
 8001d44:	40021000 	.word	0x40021000
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	003d0900 	.word	0x003d0900

08001d50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <RCC_Delay+0x34>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <RCC_Delay+0x38>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a5b      	lsrs	r3, r3, #9
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d6c:	bf00      	nop
  }
  while (Delay --);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	60fa      	str	r2, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f9      	bne.n	8001d6c <RCC_Delay+0x1c>
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	2000003c 	.word	0x2000003c
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e041      	b.n	8001e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe ffd8 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 fa6a 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d001      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e035      	b.n	8001eb0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <HAL_TIM_Base_Start_IT+0x90>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_TIM_Base_Start_IT+0x4e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_TIM_Base_Start_IT+0x4e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_TIM_Base_Start_IT+0x94>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d010      	beq.n	8001eae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	e007      	b.n	8001eae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0202 	mvn.w	r2, #2
 8001ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f9b1 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f9a4 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f9b3 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0204 	mvn.w	r2, #4
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f987 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f97a 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f989 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0208 	mvn.w	r2, #8
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f95d 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f950 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f95f 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0210 	mvn.w	r2, #16
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f933 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f926 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f935 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe ff4e 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa67 	bl	8002542 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8f9 	bl	8002292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0220 	mvn.w	r2, #32
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa32 	bl	8002530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_TIM_ConfigClockSource+0x18>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e0b3      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x180>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800210a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002112:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002124:	d03e      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xd0>
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	f200 8087 	bhi.w	800223c <HAL_TIM_ConfigClockSource+0x168>
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	f000 8085 	beq.w	8002240 <HAL_TIM_ConfigClockSource+0x16c>
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	d87f      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800213c:	2b70      	cmp	r3, #112	; 0x70
 800213e:	d01a      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xa2>
 8002140:	2b70      	cmp	r3, #112	; 0x70
 8002142:	d87b      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d050      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x116>
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d877      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800214c:	2b50      	cmp	r3, #80	; 0x50
 800214e:	d03c      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0xf6>
 8002150:	2b50      	cmp	r3, #80	; 0x50
 8002152:	d873      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d058      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x136>
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d86f      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800215c:	2b30      	cmp	r3, #48	; 0x30
 800215e:	d064      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
 8002160:	2b30      	cmp	r3, #48	; 0x30
 8002162:	d86b      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 8002164:	2b20      	cmp	r3, #32
 8002166:	d060      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
 8002168:	2b20      	cmp	r3, #32
 800216a:	d867      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d05c      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
 8002170:	2b10      	cmp	r3, #16
 8002172:	d05a      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002174:	e062      	b.n	800223c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f000 f95c 	bl	8002442 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002198:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	609a      	str	r2, [r3, #8]
      break;
 80021a2:	e04e      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f000 f945 	bl	8002442 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c6:	609a      	str	r2, [r3, #8]
      break;
 80021c8:	e03b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 f8bc 	bl	8002354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2150      	movs	r1, #80	; 0x50
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f913 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 80021e8:	e02b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f000 f8da 	bl	80023b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2160      	movs	r1, #96	; 0x60
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f903 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002208:	e01b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	461a      	mov	r2, r3
 8002218:	f000 f89c 	bl	8002354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2140      	movs	r1, #64	; 0x40
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8f3 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002228:	e00b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f000 f8ea 	bl	800240e <TIM_ITRx_SetConfig>
        break;
 800223a:	e002      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002240:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a25      	ldr	r2, [pc, #148]	; (800234c <TIM_Base_SetConfig+0xa8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x28>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x28>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <TIM_Base_SetConfig+0xac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <TIM_Base_SetConfig+0xa8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <TIM_Base_SetConfig+0x52>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d003      	beq.n	80022f6 <TIM_Base_SetConfig+0x52>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a17      	ldr	r2, [pc, #92]	; (8002350 <TIM_Base_SetConfig+0xac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <TIM_Base_SetConfig+0xa8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400

08002354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800237e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f023 030a 	bic.w	r3, r3, #10
 8002390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	621a      	str	r2, [r3, #32]
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f023 0210 	bic.w	r2, r3, #16
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	f043 0307 	orr.w	r3, r3, #7
 8002430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	021a      	lsls	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	431a      	orrs	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e041      	b.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d004      	beq.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10c      	bne.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40000400 	.word	0x40000400

08002530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4d0c      	ldr	r5, [pc, #48]	; (800258c <__libc_init_array+0x38>)
 800255a:	4c0d      	ldr	r4, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	f000 f822 	bl	80025ac <_init>
 8002568:	2600      	movs	r6, #0
 800256a:	4d0a      	ldr	r5, [pc, #40]	; (8002594 <__libc_init_array+0x40>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f855 3b04 	ldr.w	r3, [r5], #4
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	f855 3b04 	ldr.w	r3, [r5], #4
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	080025e4 	.word	0x080025e4
 8002590:	080025e4 	.word	0x080025e4
 8002594:	080025e4 	.word	0x080025e4
 8002598:	080025e8 	.word	0x080025e8

0800259c <memset>:
 800259c:	4603      	mov	r3, r0
 800259e:	4402      	add	r2, r0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	f803 1b01 	strb.w	r1, [r3], #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <_init>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr

080025b8 <_fini>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr
